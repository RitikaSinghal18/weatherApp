{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","process","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","onChange","e","target","value","onKeyPress","key","fetch","then","res","json","result","aria-label","placeholder","name","sys","country","d","date","getDate","day","getDay","month","getMonth","year","getFullYear","currentDate","dateBuilder","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","currentHours","currentMinutes","currentSeconds","timeBuilder","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iLACMA,EACCC,mCADDD,EAEE,2CAsEOE,MAnEf,WAAe,IAAD,EACeC,mBAAS,IADxB,mBACHC,EADG,KACGC,EADH,OAEmBF,mBAAS,IAF5B,mBAEHG,EAFG,KAEKC,EAFL,KAmCV,OAEE,qBAAKC,UAAmC,oBAAhBF,EAAQG,KAAuBH,EAAQG,KAAKC,KAAO,GAAM,OAAS,OAAU,UAApG,SACE,sBAAKF,UAAU,kBAAf,UACI,oBAAIA,UAAU,SAAd,4DACA,qBAAKA,UAAU,6BAAf,SACE,uBAAOG,KAAK,OAAOC,SAAU,SAAAC,GAAC,OAAIR,EAASQ,EAAEC,OAAOC,QAAQA,MAAOX,EAAOY,WArCrE,SAACH,GACD,UAAVA,EAAEI,KACHC,MAAM,GAAD,OAAIlB,EAAJ,qBAAyBI,EAAzB,+BAAqDJ,IACzDmB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJf,EAAYe,GACZjB,EAAS,QA+ByFG,UAAU,0BAA0Be,aAAW,SAASC,YAAY,gBAG3I,oBAAhBlB,EAAQG,KACjB,gCACE,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BF,EAAQmB,KAAnC,KAA2CnB,EAAQoB,IAAIC,WACvD,qBAAKnB,UAAU,OAAf,SAlCQ,SAACoB,GACnB,IAEIC,EAAOD,EAAEE,UACTC,EAFO,CAAC,SAAS,SAAS,UAAU,YAAY,WAAW,SAAS,YAEzDH,EAAEI,UACbC,EAJS,CAAC,UAAU,WAAW,QAAQ,QAAQ,MAAM,OAAO,OAAO,SAAS,YAAY,UAAU,WAAW,YAI9FL,EAAEM,YACjBC,EAAOP,EAAEQ,cACTC,EAAcR,EAAK,GAAL,WAAaA,GAAb,UAAuBA,GAEzC,MAAM,GAAN,OAAUE,EAAV,YAAiBM,EAAjB,YAAgCJ,EAAhC,YAAyCE,GAyBRG,CAAY,IAAIC,QACvC,qBAAK/B,UAAU,OAAf,SAxBQ,SAACoB,GACnB,IAAIY,EAAQZ,EAAEa,WACVC,EAAUd,EAAEe,aACZC,EAAUhB,EAAEiB,aACZC,EAAeN,EAAM,GAAN,WAAcA,GAAd,UAAyBA,GACxCO,EAAiBL,EAAQ,GAAR,WAAgBA,GAAhB,UAA6BA,GAC9CM,EAAiBJ,EAAQ,GAAR,WAAgBA,GAAhB,UAA6BA,GAClD,MAAM,GAAN,OAAUE,EAAV,YAA0BC,EAA1B,YAA4CC,GAiBXC,CAAY,IAAIV,WAEzC,sBAAK/B,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACG0C,KAAKC,MAAM7C,EAAQG,KAAKC,MAD3B,WAGA,qBAAKF,UAAU,UAAf,SACGF,EAAQA,QAAQ,GAAGG,aAItB,SCtDD2C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnC,MAAK,YAAkD,IAA/CoC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.bbdd9b49.chunk.js","sourcesContent":["import React,{useState} from 'react';\nconst api = {\n  key: process.env.REACT_APP_API_KEY,\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App(){\n    const [query,setQuery] = useState('');\n    const [weather,setWeather] = useState({});\n\n    const search = (e) => {\n      if(e.key === \"Enter\"){\n        fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather((result));\n          setQuery('');\n        });\n      }\n    }\n    const dateBuilder = (d) => {\n      let months = [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"];\n      let days = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];\n      let date = d.getDate();\n      let day = days[d.getDay()];\n      let month = months[d.getMonth()];\n      let year = d.getFullYear();\n      let currentDate = date<10? `0${date}`:`${date}`;\n\n      return `${day} ${currentDate} ${month},${year}`\n    }\n    const timeBuilder = (d) => {\n      let hours = d.getHours();\n      let minutes = d.getMinutes();\n      let seconds = d.getSeconds();\n      let currentHours = hours<10? `0${hours}`:`${hours}`;\n      let currentMinutes = minutes<10? `0${minutes}`:`${minutes}`;\n      let currentSeconds = seconds<10? `0${seconds}`:`${seconds}`;\n      return `${currentHours}:${currentMinutes}:${currentSeconds}`;\n    }\n\n    return(\n      \n      <div className={(typeof weather.main != \"undefined\")?((weather.main.temp > 16) ? 'warm' : 'cold') : 'default'}>\n        <div className=\"container-fluid\">\n            <h4 className=\"header\">Enter city name to get the weather information</h4>\n            <div className=\"input-group mb-3 searchbox\">\n              <input type=\"text\" onChange={e => setQuery(e.target.value)} value={query} onKeyPress={search} className=\"form-control search-bar\" aria-label=\"Search\" placeholder=\"Search...\" />\n            </div>\n            \n            {(typeof weather.main != \"undefined\") ? (\n            <div>\n              <div className=\"location-box\">\n                <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n                <div className=\"date\">{dateBuilder(new Date())}</div>\n                <div className=\"time\">{timeBuilder(new Date())}</div>\n              </div>\n              <div className=\"weather-box\">\n                <div className=\"temp\">\n                  {Math.round(weather.main.temp)}&deg;C\n                </div>\n                <div className=\"weather\">\n                  {weather.weather[0].main}\n                </div>\n              </div>\n            </div>\n            ): ('')}\n        </div>\n            \n      </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}